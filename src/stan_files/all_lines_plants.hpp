/*
    clonewars is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    clonewars is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with clonewars.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_all_lines_plants_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_all_lines_plants");
    reader.add_event(94, 94, "end", "model_all_lines_plants");
    return reader;
}

#include <meta_header.hpp>
 class model_all_lines_plants : public prob_grad {
private:
    int N_ts;
    int max_reps;
    int n_lines;
    vector<int> nobs_ts;
    vector<int> line_ts;
    matrix_d X;
    double w_0;
    double eta;
    double mu_theta;
    double sigma_theta;
    double x_0;
    double gamma;
    double mu_phi;
    double sigma_phi;
    double y_0;
    double delta;
    double z_0;
    double zeta;
public:
    model_all_lines_plants(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_all_lines_plants(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_all_lines_plants_namespace::model_all_lines_plants";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "N_ts", "int", context__.to_vec());
            N_ts = int(0);
            vals_i__ = context__.vals_i("N_ts");
            pos__ = 0;
            N_ts = vals_i__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "max_reps", "int", context__.to_vec());
            max_reps = int(0);
            vals_i__ = context__.vals_i("max_reps");
            pos__ = 0;
            max_reps = vals_i__[pos__++];
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "n_lines", "int", context__.to_vec());
            n_lines = int(0);
            vals_i__ = context__.vals_i("n_lines");
            pos__ = 0;
            n_lines = vals_i__[pos__++];
            current_statement_begin__ = 11;
            validate_non_negative_index("nobs_ts", "N_ts", N_ts);
            context__.validate_dims("data initialization", "nobs_ts", "int", context__.to_vec(N_ts));
            validate_non_negative_index("nobs_ts", "N_ts", N_ts);
            nobs_ts = std::vector<int>(N_ts,int(0));
            vals_i__ = context__.vals_i("nobs_ts");
            pos__ = 0;
            size_t nobs_ts_limit_0__ = N_ts;
            for (size_t i_0__ = 0; i_0__ < nobs_ts_limit_0__; ++i_0__) {
                nobs_ts[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("line_ts", "N_ts", N_ts);
            context__.validate_dims("data initialization", "line_ts", "int", context__.to_vec(N_ts));
            validate_non_negative_index("line_ts", "N_ts", N_ts);
            line_ts = std::vector<int>(N_ts,int(0));
            vals_i__ = context__.vals_i("line_ts");
            pos__ = 0;
            size_t line_ts_limit_0__ = N_ts;
            for (size_t i_0__ = 0; i_0__ < line_ts_limit_0__; ++i_0__) {
                line_ts[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("X", "max_reps", max_reps);
            validate_non_negative_index("X", "N_ts", N_ts);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(max_reps,N_ts));
            validate_non_negative_index("X", "max_reps", max_reps);
            validate_non_negative_index("X", "N_ts", N_ts);
            X = matrix_d(static_cast<Eigen::VectorXd::Index>(max_reps),static_cast<Eigen::VectorXd::Index>(N_ts));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_m_mat_lim__ = max_reps;
            size_t X_n_mat_lim__ = N_ts;
            for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                    X(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "w_0", "double", context__.to_vec());
            w_0 = double(0);
            vals_r__ = context__.vals_r("w_0");
            pos__ = 0;
            w_0 = vals_r__[pos__++];
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "eta", "double", context__.to_vec());
            eta = double(0);
            vals_r__ = context__.vals_r("eta");
            pos__ = 0;
            eta = vals_r__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "mu_theta", "double", context__.to_vec());
            mu_theta = double(0);
            vals_r__ = context__.vals_r("mu_theta");
            pos__ = 0;
            mu_theta = vals_r__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "sigma_theta", "double", context__.to_vec());
            sigma_theta = double(0);
            vals_r__ = context__.vals_r("sigma_theta");
            pos__ = 0;
            sigma_theta = vals_r__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "x_0", "double", context__.to_vec());
            x_0 = double(0);
            vals_r__ = context__.vals_r("x_0");
            pos__ = 0;
            x_0 = vals_r__[pos__++];
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "gamma", "double", context__.to_vec());
            gamma = double(0);
            vals_r__ = context__.vals_r("gamma");
            pos__ = 0;
            gamma = vals_r__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "mu_phi", "double", context__.to_vec());
            mu_phi = double(0);
            vals_r__ = context__.vals_r("mu_phi");
            pos__ = 0;
            mu_phi = vals_r__[pos__++];
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "sigma_phi", "double", context__.to_vec());
            sigma_phi = double(0);
            vals_r__ = context__.vals_r("sigma_phi");
            pos__ = 0;
            sigma_phi = vals_r__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "y_0", "double", context__.to_vec());
            y_0 = double(0);
            vals_r__ = context__.vals_r("y_0");
            pos__ = 0;
            y_0 = vals_r__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "delta", "double", context__.to_vec());
            delta = double(0);
            vals_r__ = context__.vals_r("delta");
            pos__ = 0;
            delta = vals_r__[pos__++];
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "z_0", "double", context__.to_vec());
            z_0 = double(0);
            vals_r__ = context__.vals_r("z_0");
            pos__ = 0;
            z_0 = vals_r__[pos__++];
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "zeta", "double", context__.to_vec());
            zeta = double(0);
            vals_r__ = context__.vals_r("zeta");
            pos__ = 0;
            zeta = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 8;
            check_greater_or_equal(function__,"N_ts",N_ts,1);
            current_statement_begin__ = 9;
            check_greater_or_equal(function__,"max_reps",max_reps,1);
            current_statement_begin__ = 10;
            check_greater_or_equal(function__,"n_lines",n_lines,1);
            current_statement_begin__ = 11;
            for (int k0__ = 0; k0__ < N_ts; ++k0__) {
                check_greater_or_equal(function__,"nobs_ts[k0__]",nobs_ts[k0__],1);
            }
            current_statement_begin__ = 12;
            for (int k0__ = 0; k0__ < N_ts; ++k0__) {
                check_greater_or_equal(function__,"line_ts[k0__]",line_ts[k0__],1);
                check_less_or_equal(function__,"line_ts[k0__]",line_ts[k0__],n_lines);
            }
            current_statement_begin__ = 13;
            check_greater_or_equal(function__,"X",X,0);
            current_statement_begin__ = 15;
            current_statement_begin__ = 16;
            current_statement_begin__ = 18;
            current_statement_begin__ = 19;
            current_statement_begin__ = 20;
            current_statement_begin__ = 21;
            current_statement_begin__ = 23;
            current_statement_begin__ = 24;
            current_statement_begin__ = 25;
            current_statement_begin__ = 26;
            current_statement_begin__ = 27;
            current_statement_begin__ = 28;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 32;
            ++num_params_r__;
            current_statement_begin__ = 33;
            ++num_params_r__;
            current_statement_begin__ = 35;
            ++num_params_r__;
            current_statement_begin__ = 36;
            ++num_params_r__;
            current_statement_begin__ = 37;
            validate_non_negative_index("sd_wi_a", "n_lines", n_lines);
            num_params_r__ += n_lines;
            current_statement_begin__ = 39;
            validate_non_negative_index("Z_r", "n_lines", n_lines);
            num_params_r__ += n_lines;
            current_statement_begin__ = 40;
            validate_non_negative_index("Z_a", "n_lines", n_lines);
            num_params_r__ += n_lines;
            current_statement_begin__ = 41;
            validate_non_negative_index("Z_wi_a", "N_ts", N_ts);
            num_params_r__ += N_ts;
            current_statement_begin__ = 43;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_all_lines_plants() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu_r")))
            throw std::runtime_error("variable mu_r missing");
        vals_r__ = context__.vals_r("mu_r");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_r", "double", context__.to_vec());
        double mu_r(0);
        mu_r = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_r);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_r: ") + e.what());
        }

        if (!(context__.contains_r("mu_a")))
            throw std::runtime_error("variable mu_a missing");
        vals_r__ = context__.vals_r("mu_a");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_a", "double", context__.to_vec());
        double mu_a(0);
        mu_a = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_a);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_a: ") + e.what());
        }

        if (!(context__.contains_r("sd_r")))
            throw std::runtime_error("variable sd_r missing");
        vals_r__ = context__.vals_r("sd_r");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_r", "double", context__.to_vec());
        double sd_r(0);
        sd_r = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_r);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_r: ") + e.what());
        }

        if (!(context__.contains_r("sd_a")))
            throw std::runtime_error("variable sd_a missing");
        vals_r__ = context__.vals_r("sd_a");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_a", "double", context__.to_vec());
        double sd_a(0);
        sd_a = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_a);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_a: ") + e.what());
        }

        if (!(context__.contains_r("sd_wi_a")))
            throw std::runtime_error("variable sd_wi_a missing");
        vals_r__ = context__.vals_r("sd_wi_a");
        pos__ = 0U;
        validate_non_negative_index("sd_wi_a", "n_lines", n_lines);
        context__.validate_dims("initialization", "sd_wi_a", "vector_d", context__.to_vec(n_lines));
        vector_d sd_wi_a(static_cast<Eigen::VectorXd::Index>(n_lines));
        for (int j1__ = 0U; j1__ < n_lines; ++j1__)
            sd_wi_a(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_wi_a);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_wi_a: ") + e.what());
        }

        if (!(context__.contains_r("Z_r")))
            throw std::runtime_error("variable Z_r missing");
        vals_r__ = context__.vals_r("Z_r");
        pos__ = 0U;
        validate_non_negative_index("Z_r", "n_lines", n_lines);
        context__.validate_dims("initialization", "Z_r", "vector_d", context__.to_vec(n_lines));
        vector_d Z_r(static_cast<Eigen::VectorXd::Index>(n_lines));
        for (int j1__ = 0U; j1__ < n_lines; ++j1__)
            Z_r(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(Z_r);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Z_r: ") + e.what());
        }

        if (!(context__.contains_r("Z_a")))
            throw std::runtime_error("variable Z_a missing");
        vals_r__ = context__.vals_r("Z_a");
        pos__ = 0U;
        validate_non_negative_index("Z_a", "n_lines", n_lines);
        context__.validate_dims("initialization", "Z_a", "vector_d", context__.to_vec(n_lines));
        vector_d Z_a(static_cast<Eigen::VectorXd::Index>(n_lines));
        for (int j1__ = 0U; j1__ < n_lines; ++j1__)
            Z_a(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(Z_a);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Z_a: ") + e.what());
        }

        if (!(context__.contains_r("Z_wi_a")))
            throw std::runtime_error("variable Z_wi_a missing");
        vals_r__ = context__.vals_r("Z_wi_a");
        pos__ = 0U;
        validate_non_negative_index("Z_wi_a", "N_ts", N_ts);
        context__.validate_dims("initialization", "Z_wi_a", "vector_d", context__.to_vec(N_ts));
        vector_d Z_wi_a(static_cast<Eigen::VectorXd::Index>(N_ts));
        for (int j1__ = 0U; j1__ < N_ts; ++j1__)
            Z_wi_a(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(Z_wi_a);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Z_wi_a: ") + e.what());
        }

        if (!(context__.contains_r("process")))
            throw std::runtime_error("variable process missing");
        vals_r__ = context__.vals_r("process");
        pos__ = 0U;
        context__.validate_dims("initialization", "process", "double", context__.to_vec());
        double process(0);
        process = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,process);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable process: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            T__ mu_r;
            (void) mu_r;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_r = in__.scalar_constrain(lp__);
            else
                mu_r = in__.scalar_constrain();

            T__ mu_a;
            (void) mu_a;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_a = in__.scalar_constrain(lp__);
            else
                mu_a = in__.scalar_constrain();

            T__ sd_r;
            (void) sd_r;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_r = in__.scalar_lb_constrain(0,lp__);
            else
                sd_r = in__.scalar_lb_constrain(0);

            T__ sd_a;
            (void) sd_a;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_a = in__.scalar_lb_constrain(0,lp__);
            else
                sd_a = in__.scalar_lb_constrain(0);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_wi_a;
            (void) sd_wi_a;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_wi_a = in__.vector_lb_constrain(0,n_lines,lp__);
            else
                sd_wi_a = in__.vector_lb_constrain(0,n_lines);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  Z_r;
            (void) Z_r;  // dummy to suppress unused var warning
            if (jacobian__)
                Z_r = in__.vector_constrain(n_lines,lp__);
            else
                Z_r = in__.vector_constrain(n_lines);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  Z_a;
            (void) Z_a;  // dummy to suppress unused var warning
            if (jacobian__)
                Z_a = in__.vector_constrain(n_lines,lp__);
            else
                Z_a = in__.vector_constrain(n_lines);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  Z_wi_a;
            (void) Z_wi_a;  // dummy to suppress unused var warning
            if (jacobian__)
                Z_wi_a = in__.vector_constrain(N_ts,lp__);
            else
                Z_wi_a = in__.vector_constrain(N_ts);

            T__ process;
            (void) process;  // dummy to suppress unused var warning
            if (jacobian__)
                process = in__.scalar_lb_constrain(0,lp__);
            else
                process = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 47;
            validate_non_negative_index("r", "n_lines", n_lines);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  r(static_cast<Eigen::VectorXd::Index>(n_lines));
            (void) r;  // dummy to suppress unused var warning

            stan::math::initialize(r, DUMMY_VAR__);
            stan::math::fill(r,DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("a", "n_lines", n_lines);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  a(static_cast<Eigen::VectorXd::Index>(n_lines));
            (void) a;  // dummy to suppress unused var warning

            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a,DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("X_pred", "max_reps", max_reps);
            validate_non_negative_index("X_pred", "N_ts", N_ts);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  X_pred(static_cast<Eigen::VectorXd::Index>(max_reps),static_cast<Eigen::VectorXd::Index>(N_ts));
            (void) X_pred;  // dummy to suppress unused var warning

            stan::math::initialize(X_pred, DUMMY_VAR__);
            stan::math::fill(X_pred,DUMMY_VAR__);


            current_statement_begin__ = 51;
            stan::math::assign(r, exp(add(mu_r,multiply(sd_r,Z_r))));
            current_statement_begin__ = 52;
            stan::math::assign(a, inv_logit(add(mu_a,multiply(sd_a,Z_a))));
            current_statement_begin__ = 54;
            for (int i = 1; i <= N_ts; ++i) {
                {
                current_statement_begin__ = 56;
                T__ a_;
                (void) a_;  // dummy to suppress unused var warning

                stan::math::initialize(a_, DUMMY_VAR__);
                stan::math::fill(a_,DUMMY_VAR__);
                stan::math::assign(a_,inv_logit(((mu_a + (sd_a * get_base1(Z_a,get_base1(line_ts,i,"line_ts",1),"Z_a",1))) + (get_base1(Z_wi_a,i,"Z_wi_a",1) * get_base1(sd_wi_a,get_base1(line_ts,i,"line_ts",1),"sd_wi_a",1)))));
                current_statement_begin__ = 59;
                T__ r_;
                (void) r_;  // dummy to suppress unused var warning

                stan::math::initialize(r_, DUMMY_VAR__);
                stan::math::fill(r_,DUMMY_VAR__);
                stan::math::assign(r_,get_base1(r,get_base1(line_ts,i,"line_ts",1),"r",1));
                current_statement_begin__ = 61;
                int n_(0);
                (void) n_;  // dummy to suppress unused var warning

                stan::math::fill(n_, std::numeric_limits<int>::min());
                stan::math::assign(n_,get_base1(nobs_ts,i,"nobs_ts",1));


                current_statement_begin__ = 63;
                stan::math::assign(get_base1_lhs(X_pred,1,i,"X_pred",1), get_base1(X,1,i,"X",1));
                current_statement_begin__ = 64;
                stan::model::assign(X_pred, 
                            stan::model::cons_list(stan::model::index_min_max(2, n_), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            add(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_min_max(1, (n_ - 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X"),multiply(r_,subtract(1,multiply(a_,exp(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_min_max(1, (n_ - 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X")))))), 
                            "assigning variable X_pred");
                current_statement_begin__ = 65;
                if (as_bool(logical_lt(n_,max_reps))) {
                    current_statement_begin__ = 65;
                    for (int j = (n_ + 1); j <= max_reps; ++j) {
                        current_statement_begin__ = 65;
                        stan::math::assign(get_base1_lhs(X_pred,j,i,"X_pred",1), 0);
                    }
                }
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < n_lines; ++i0__) {
                if (stan::math::is_uninitialized(r(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < n_lines; ++i0__) {
                if (stan::math::is_uninitialized(a(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: a" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < max_reps; ++i0__) {
                for (int i1__ = 0; i1__ < N_ts; ++i1__) {
                    if (stan::math::is_uninitialized(X_pred(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: X_pred" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 47;
            check_greater_or_equal(function__,"r",r,0);
            current_statement_begin__ = 48;
            check_greater_or_equal(function__,"a",a,0);
            check_less_or_equal(function__,"a",a,1);
            current_statement_begin__ = 49;
            check_greater_or_equal(function__,"X_pred",X_pred,0);

            // model body

            current_statement_begin__ = 72;
            lp_accum__.add(cauchy_log<propto__>(process, w_0, eta));
            if (process < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-cauchy_ccdf_log(0, w_0, eta));
            current_statement_begin__ = 75;
            lp_accum__.add(normal_log<propto__>(mu_r, mu_theta, sigma_theta));
            current_statement_begin__ = 76;
            lp_accum__.add(cauchy_log<propto__>(sd_r, x_0, gamma));
            if (sd_r < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-cauchy_ccdf_log(0, x_0, gamma));
            current_statement_begin__ = 79;
            lp_accum__.add(normal_log<propto__>(mu_a, mu_phi, sigma_phi));
            current_statement_begin__ = 80;
            lp_accum__.add(cauchy_log<propto__>(sd_a, y_0, delta));
            if (sd_a < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-cauchy_ccdf_log(0, y_0, delta));
            current_statement_begin__ = 81;
            for (int i = 1; i <= n_lines; ++i) {

                current_statement_begin__ = 82;
                lp_accum__.add(cauchy_log<propto__>(get_base1(sd_wi_a,i,"sd_wi_a",1), z_0, zeta));
                if (get_base1(sd_wi_a,i,"sd_wi_a",1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-cauchy_ccdf_log(0, z_0, zeta));
            }
            current_statement_begin__ = 86;
            lp_accum__.add(normal_log<propto__>(Z_r, 0, 1));
            current_statement_begin__ = 87;
            lp_accum__.add(normal_log<propto__>(Z_a, 0, 1));
            current_statement_begin__ = 88;
            lp_accum__.add(normal_log<propto__>(Z_wi_a, 0, 1));
            current_statement_begin__ = 90;
            for (int i = 1; i <= N_ts; ++i) {

                current_statement_begin__ = 91;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_min_max(2, get_base1(nobs_ts,i,"nobs_ts",1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X"), stan::model::rvalue(X_pred, stan::model::cons_list(stan::model::index_min_max(2, get_base1(nobs_ts,i,"nobs_ts",1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X_pred"), process));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu_r");
        names__.push_back("mu_a");
        names__.push_back("sd_r");
        names__.push_back("sd_a");
        names__.push_back("sd_wi_a");
        names__.push_back("Z_r");
        names__.push_back("Z_a");
        names__.push_back("Z_wi_a");
        names__.push_back("process");
        names__.push_back("r");
        names__.push_back("a");
        names__.push_back("X_pred");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_lines);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_lines);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_lines);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_ts);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_lines);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_lines);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(max_reps);
        dims__.push_back(N_ts);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_all_lines_plants_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mu_r = in__.scalar_constrain();
        double mu_a = in__.scalar_constrain();
        double sd_r = in__.scalar_lb_constrain(0);
        double sd_a = in__.scalar_lb_constrain(0);
        vector_d sd_wi_a = in__.vector_lb_constrain(0,n_lines);
        vector_d Z_r = in__.vector_constrain(n_lines);
        vector_d Z_a = in__.vector_constrain(n_lines);
        vector_d Z_wi_a = in__.vector_constrain(N_ts);
        double process = in__.scalar_lb_constrain(0);
        vars__.push_back(mu_r);
        vars__.push_back(mu_a);
        vars__.push_back(sd_r);
        vars__.push_back(sd_a);
            for (int k_0__ = 0; k_0__ < n_lines; ++k_0__) {
            vars__.push_back(sd_wi_a[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n_lines; ++k_0__) {
            vars__.push_back(Z_r[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n_lines; ++k_0__) {
            vars__.push_back(Z_a[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N_ts; ++k_0__) {
            vars__.push_back(Z_wi_a[k_0__]);
            }
        vars__.push_back(process);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 47;
            validate_non_negative_index("r", "n_lines", n_lines);
            vector_d r(static_cast<Eigen::VectorXd::Index>(n_lines));
            (void) r;  // dummy to suppress unused var warning

            stan::math::initialize(r, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(r,DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("a", "n_lines", n_lines);
            vector_d a(static_cast<Eigen::VectorXd::Index>(n_lines));
            (void) a;  // dummy to suppress unused var warning

            stan::math::initialize(a, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(a,DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("X_pred", "max_reps", max_reps);
            validate_non_negative_index("X_pred", "N_ts", N_ts);
            matrix_d X_pred(static_cast<Eigen::VectorXd::Index>(max_reps),static_cast<Eigen::VectorXd::Index>(N_ts));
            (void) X_pred;  // dummy to suppress unused var warning

            stan::math::initialize(X_pred, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(X_pred,DUMMY_VAR__);


            current_statement_begin__ = 51;
            stan::math::assign(r, exp(add(mu_r,multiply(sd_r,Z_r))));
            current_statement_begin__ = 52;
            stan::math::assign(a, inv_logit(add(mu_a,multiply(sd_a,Z_a))));
            current_statement_begin__ = 54;
            for (int i = 1; i <= N_ts; ++i) {
                {
                current_statement_begin__ = 56;
                double a_(0.0);
                (void) a_;  // dummy to suppress unused var warning

                stan::math::initialize(a_, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(a_,DUMMY_VAR__);
                stan::math::assign(a_,inv_logit(((mu_a + (sd_a * get_base1(Z_a,get_base1(line_ts,i,"line_ts",1),"Z_a",1))) + (get_base1(Z_wi_a,i,"Z_wi_a",1) * get_base1(sd_wi_a,get_base1(line_ts,i,"line_ts",1),"sd_wi_a",1)))));
                current_statement_begin__ = 59;
                double r_(0.0);
                (void) r_;  // dummy to suppress unused var warning

                stan::math::initialize(r_, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(r_,DUMMY_VAR__);
                stan::math::assign(r_,get_base1(r,get_base1(line_ts,i,"line_ts",1),"r",1));
                current_statement_begin__ = 61;
                int n_(0);
                (void) n_;  // dummy to suppress unused var warning

                stan::math::fill(n_, std::numeric_limits<int>::min());
                stan::math::assign(n_,get_base1(nobs_ts,i,"nobs_ts",1));


                current_statement_begin__ = 63;
                stan::math::assign(get_base1_lhs(X_pred,1,i,"X_pred",1), get_base1(X,1,i,"X",1));
                current_statement_begin__ = 64;
                stan::model::assign(X_pred, 
                            stan::model::cons_list(stan::model::index_min_max(2, n_), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            add(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_min_max(1, (n_ - 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X"),multiply(r_,subtract(1,multiply(a_,exp(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_min_max(1, (n_ - 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X")))))), 
                            "assigning variable X_pred");
                current_statement_begin__ = 65;
                if (as_bool(logical_lt(n_,max_reps))) {
                    current_statement_begin__ = 65;
                    for (int j = (n_ + 1); j <= max_reps; ++j) {
                        current_statement_begin__ = 65;
                        stan::math::assign(get_base1_lhs(X_pred,j,i,"X_pred",1), 0);
                    }
                }
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 47;
            check_greater_or_equal(function__,"r",r,0);
            current_statement_begin__ = 48;
            check_greater_or_equal(function__,"a",a,0);
            check_less_or_equal(function__,"a",a,1);
            current_statement_begin__ = 49;
            check_greater_or_equal(function__,"X_pred",X_pred,0);

            // write transformed parameters
            for (int k_0__ = 0; k_0__ < n_lines; ++k_0__) {
            vars__.push_back(r[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n_lines; ++k_0__) {
            vars__.push_back(a[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < N_ts; ++k_1__) {
                for (int k_0__ = 0; k_0__ < max_reps; ++k_0__) {
                vars__.push_back(X_pred(k_0__, k_1__));
                }
            }

            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_all_lines_plants";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_a";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_lines; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_wi_a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_lines; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Z_r" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_lines; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Z_a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_ts; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Z_wi_a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "process";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n_lines; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_lines; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= N_ts; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= max_reps; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "X_pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_r";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_a";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_lines; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_wi_a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_lines; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Z_r" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_lines; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Z_a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_ts; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Z_wi_a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "process";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n_lines; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_lines; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= N_ts; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= max_reps; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "X_pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}

typedef model_all_lines_plants_namespace::model_all_lines_plants stan_model;


#endif
