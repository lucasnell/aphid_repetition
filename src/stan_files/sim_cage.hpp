/*
    clonewars is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    clonewars is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with clonewars.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_sim_cage_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sim_cage");
    reader.add_event(133, 133, "end", "model_sim_cage");
    return reader;
}

#include <meta_header.hpp>
 class model_sim_cage : public prob_grad {
private:
    int n_plants;
    int n_lines;
    matrix_d X_0;
    int max_t;
    vector_d R;
    vector_d A;
    vector_d D_slope;
    vector_d D_inter;
    double process_error;
public:
    model_sim_cage(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_sim_cage(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_sim_cage_namespace::model_sim_cage";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "n_plants", "int", context__.to_vec());
            n_plants = int(0);
            vals_i__ = context__.vals_i("n_plants");
            pos__ = 0;
            n_plants = vals_i__[pos__++];
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "n_lines", "int", context__.to_vec());
            n_lines = int(0);
            vals_i__ = context__.vals_i("n_lines");
            pos__ = 0;
            n_lines = vals_i__[pos__++];
            current_statement_begin__ = 51;
            validate_non_negative_index("X_0", "n_plants", n_plants);
            validate_non_negative_index("X_0", "n_lines", n_lines);
            context__.validate_dims("data initialization", "X_0", "matrix_d", context__.to_vec(n_plants,n_lines));
            validate_non_negative_index("X_0", "n_plants", n_plants);
            validate_non_negative_index("X_0", "n_lines", n_lines);
            X_0 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_plants),static_cast<Eigen::VectorXd::Index>(n_lines));
            vals_r__ = context__.vals_r("X_0");
            pos__ = 0;
            size_t X_0_m_mat_lim__ = n_plants;
            size_t X_0_n_mat_lim__ = n_lines;
            for (size_t n_mat__ = 0; n_mat__ < X_0_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_0_m_mat_lim__; ++m_mat__) {
                    X_0(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "max_t", "int", context__.to_vec());
            max_t = int(0);
            vals_i__ = context__.vals_i("max_t");
            pos__ = 0;
            max_t = vals_i__[pos__++];
            current_statement_begin__ = 53;
            validate_non_negative_index("R", "n_lines", n_lines);
            context__.validate_dims("data initialization", "R", "vector_d", context__.to_vec(n_lines));
            validate_non_negative_index("R", "n_lines", n_lines);
            R = vector_d(static_cast<Eigen::VectorXd::Index>(n_lines));
            vals_r__ = context__.vals_r("R");
            pos__ = 0;
            size_t R_i_vec_lim__ = n_lines;
            for (size_t i_vec__ = 0; i_vec__ < R_i_vec_lim__; ++i_vec__) {
                R[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 54;
            validate_non_negative_index("A", "n_lines", n_lines);
            context__.validate_dims("data initialization", "A", "vector_d", context__.to_vec(n_lines));
            validate_non_negative_index("A", "n_lines", n_lines);
            A = vector_d(static_cast<Eigen::VectorXd::Index>(n_lines));
            vals_r__ = context__.vals_r("A");
            pos__ = 0;
            size_t A_i_vec_lim__ = n_lines;
            for (size_t i_vec__ = 0; i_vec__ < A_i_vec_lim__; ++i_vec__) {
                A[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 55;
            validate_non_negative_index("D_slope", "n_lines", n_lines);
            context__.validate_dims("data initialization", "D_slope", "vector_d", context__.to_vec(n_lines));
            validate_non_negative_index("D_slope", "n_lines", n_lines);
            D_slope = vector_d(static_cast<Eigen::VectorXd::Index>(n_lines));
            vals_r__ = context__.vals_r("D_slope");
            pos__ = 0;
            size_t D_slope_i_vec_lim__ = n_lines;
            for (size_t i_vec__ = 0; i_vec__ < D_slope_i_vec_lim__; ++i_vec__) {
                D_slope[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 56;
            validate_non_negative_index("D_inter", "n_lines", n_lines);
            context__.validate_dims("data initialization", "D_inter", "vector_d", context__.to_vec(n_lines));
            validate_non_negative_index("D_inter", "n_lines", n_lines);
            D_inter = vector_d(static_cast<Eigen::VectorXd::Index>(n_lines));
            vals_r__ = context__.vals_r("D_inter");
            pos__ = 0;
            size_t D_inter_i_vec_lim__ = n_lines;
            for (size_t i_vec__ = 0; i_vec__ < D_inter_i_vec_lim__; ++i_vec__) {
                D_inter[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "process_error", "double", context__.to_vec());
            process_error = double(0);
            vals_r__ = context__.vals_r("process_error");
            pos__ = 0;
            process_error = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 49;
            check_greater_or_equal(function__,"n_plants",n_plants,1);
            current_statement_begin__ = 50;
            check_greater_or_equal(function__,"n_lines",n_lines,1);
            current_statement_begin__ = 51;
            check_greater_or_equal(function__,"X_0",X_0,0);
            current_statement_begin__ = 52;
            check_greater_or_equal(function__,"max_t",max_t,1);
            current_statement_begin__ = 53;
            check_greater_or_equal(function__,"R",R,0);
            current_statement_begin__ = 54;
            check_greater_or_equal(function__,"A",A,0);
            check_less_or_equal(function__,"A",A,1);
            current_statement_begin__ = 55;
            current_statement_begin__ = 56;
            current_statement_begin__ = 57;
            check_greater_or_equal(function__,"process_error",process_error,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_sim_cage() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("X_out");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_plants);
        dims__.push_back((max_t + 1));
        dims__.push_back(n_lines);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_sim_cage_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 61;
            validate_non_negative_index("X_out", "(max_t + 1)", (max_t + 1));
            validate_non_negative_index("X_out", "n_lines", n_lines);
            validate_non_negative_index("X_out", "n_plants", n_plants);
            vector<matrix_d> X_out(n_plants, (matrix_d(static_cast<Eigen::VectorXd::Index>((max_t + 1)),static_cast<Eigen::VectorXd::Index>(n_lines))));
            stan::math::initialize(X_out, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(X_out,DUMMY_VAR__);


            current_statement_begin__ = 64;
            for (int i = 1; i <= n_plants; ++i) {

                current_statement_begin__ = 65;
                stan::math::assign(get_base1_lhs(X_out,i,"X_out",1), rep_matrix(-(20),(max_t + 1),n_lines));
                current_statement_begin__ = 66;
                for (int j = 1; j <= n_lines; ++j) {

                    current_statement_begin__ = 67;
                    stan::math::assign(get_base1_lhs(get_base1_lhs(X_out,i,"X_out",1),1,j,"X_out",2), get_base1(X_0,i,j,"X_0",1));
                }
            }
            {
            current_statement_begin__ = 73;
            validate_non_negative_index("extant", "n_plants", n_plants);
            validate_non_negative_index("extant", "n_lines", n_lines);
            matrix_d extant(static_cast<Eigen::VectorXd::Index>(n_plants),static_cast<Eigen::VectorXd::Index>(n_lines));
            (void) extant;  // dummy to suppress unused var warning

            stan::math::initialize(extant, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(extant,DUMMY_VAR__);
            stan::math::assign(extant,rep_matrix(1,n_plants,n_lines));
            current_statement_begin__ = 75;
            double immigration(0.0);
            (void) immigration;  // dummy to suppress unused var warning

            stan::math::initialize(immigration, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(immigration,DUMMY_VAR__);
            current_statement_begin__ = 76;
            double emigration(0.0);
            (void) emigration;  // dummy to suppress unused var warning

            stan::math::initialize(emigration, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(emigration,DUMMY_VAR__);


            current_statement_begin__ = 78;
            for (int t = 1; t <= max_t; ++t) {
                {
                current_statement_begin__ = 84;
                validate_non_negative_index("Z", "n_plants", n_plants);
                vector_d Z(static_cast<Eigen::VectorXd::Index>(n_plants));
                (void) Z;  // dummy to suppress unused var warning

                stan::math::initialize(Z, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(Z,DUMMY_VAR__);
                stan::math::assign(Z,rep_vector(0,n_plants));
                current_statement_begin__ = 86;
                validate_non_negative_index("D", "n_lines", n_lines);
                validate_non_negative_index("D", "n_plants", n_plants);
                matrix_d D(static_cast<Eigen::VectorXd::Index>(n_lines),static_cast<Eigen::VectorXd::Index>(n_plants));
                (void) D;  // dummy to suppress unused var warning

                stan::math::initialize(D, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(D,DUMMY_VAR__);
                current_statement_begin__ = 88;
                validate_non_negative_index("total_D", "n_lines", n_lines);
                vector_d total_D(static_cast<Eigen::VectorXd::Index>(n_lines));
                (void) total_D;  // dummy to suppress unused var warning

                stan::math::initialize(total_D, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(total_D,DUMMY_VAR__);
                stan::math::assign(total_D,rep_vector(0,n_lines));


                current_statement_begin__ = 89;
                for (int i = 1; i <= n_plants; ++i) {

                    current_statement_begin__ = 90;
                    for (int j = 1; j <= n_lines; ++j) {

                        current_statement_begin__ = 91;
                        stan::math::assign(get_base1_lhs(Z,i,"Z",1), (get_base1(Z,i,"Z",1) + ((get_base1(extant,i,j,"extant",1) * get_base1(A,j,"A",1)) * exp(get_base1(get_base1(X_out,i,"X_out",1),t,j,"X_out",2)))));
                        current_statement_begin__ = 92;
                        stan::math::assign(get_base1_lhs(D,j,i,"D",1), (get_base1(extant,i,j,"extant",1) * exp((get_base1(D_inter,j,"D_inter",1) + (get_base1(D_slope,j,"D_slope",1) * get_base1(get_base1(X_out,i,"X_out",1),t,j,"X_out",2))))));
                        current_statement_begin__ = 93;
                        stan::math::assign(get_base1_lhs(total_D,j,"total_D",1), (get_base1(total_D,j,"total_D",1) + get_base1(D,j,i,"D",1)));
                    }
                }
                current_statement_begin__ = 100;
                for (int i = 1; i <= n_plants; ++i) {

                    current_statement_begin__ = 102;
                    for (int j = 1; j <= n_lines; ++j) {

                        current_statement_begin__ = 104;
                        if (as_bool(logical_eq(get_base1(extant,i,j,"extant",1),0))) {
                            current_statement_begin__ = 104;
                            continue;
                        }
                        current_statement_begin__ = 106;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(X_out,i,"X_out",1),(t + 1),j,"X_out",2), (get_base1(get_base1(X_out,i,"X_out",1),t,j,"X_out",2) + (get_base1(R,j,"R",1) * (1 - get_base1(Z,i,"Z",1)))));
                        current_statement_begin__ = 108;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(X_out,i,"X_out",1),(t + 1),j,"X_out",2), (get_base1(get_base1(X_out,i,"X_out",1),(t + 1),j,"X_out",2) + (normal_rng(0,1, base_rng__) * process_error)));
                        current_statement_begin__ = 111;
                        stan::math::assign(immigration, ((get_base1(total_D,j,"total_D",1) - get_base1(D,j,i,"D",1)) / (n_plants - 1)));
                        current_statement_begin__ = 112;
                        stan::math::assign(emigration, get_base1(D,j,i,"D",1));
                        current_statement_begin__ = 115;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(X_out,i,"X_out",1),(t + 1),j,"X_out",2), ((exp(get_base1(get_base1(X_out,i,"X_out",1),(t + 1),j,"X_out",2)) + immigration) - emigration));
                        current_statement_begin__ = 119;
                        if (as_bool(logical_lt(get_base1(get_base1(X_out,i,"X_out",1),(t + 1),j,"X_out",2),1))) {

                            current_statement_begin__ = 120;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(X_out,i,"X_out",1),(t + 1),j,"X_out",2), -(20));
                            current_statement_begin__ = 121;
                            stan::math::assign(get_base1_lhs(extant,i,j,"extant",1), 0);
                        } else {
                            current_statement_begin__ = 122;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(X_out,i,"X_out",1),(t + 1),j,"X_out",2), log(get_base1(get_base1(X_out,i,"X_out",1),(t + 1),j,"X_out",2)));
                        }
                    }
                }
                }
            }
            }

            // validate generated quantities
            current_statement_begin__ = 61;

            // write generated quantities
            for (int k_2__ = 0; k_2__ < n_lines; ++k_2__) {
                for (int k_1__ = 0; k_1__ < (max_t + 1); ++k_1__) {
                    for (int k_0__ = 0; k_0__ < n_plants; ++k_0__) {
                    vars__.push_back(X_out[k_0__](k_1__, k_2__));
                    }
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_sim_cage";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_2__ = 1; k_2__ <= n_lines; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (max_t + 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_plants; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_out" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_2__ = 1; k_2__ <= n_lines; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= (max_t + 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_plants; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_out" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }

}; // model

}

typedef model_sim_cage_namespace::model_sim_cage stan_model;


#endif
